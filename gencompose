#!/bin/bash
# WF 2018-12-31

#
# get a docker compose file
#
get_docker_compose() {
cat << EOF
# 
#  ProfiWiki based on Semantic Media Wiki based on Mediawiki
# 
# see
# https://www.semantic-mediawiki.org/wiki/Help:Using_Docker
# https://github.com/SemanticMediaWiki/SemanticMediaWiki/issues/1218
# https://www.semantic-mediawiki.org/wiki/SMWCon_Fall_2018/Benefits_of_running_MediaWiki_in_a_pertinent_dockerized_setup
# "Official" Mediawiki image
# https://hub.docker.com/_/mediawiki/
# WF 2018-12-29
#
# MediaWiki with MariaDB
#
# Access via "http://localhost:8080"
#   (or "http://docker-machine ip:8080" if using docker-machine)
version: "3"

# 2 services
#   db - database
#   mw - mediawiki
services:

#  MySQL compatible relational database
  db:
# use original image
    image: mariadb:10.3.10
    restart: always
    environment:
      MYSQL_DATABASE: wiki
      MYSQL_USER: wikiuser
      MYSQL_PASSWORD: $MYSQL_PASSWORD 
      MYSQL_RANDOM_ROOT_PASSWORD: "yes" 
    volumes:
      - mysqldata:/var/lib/mysql

# mediawiki 
  mw:
    #image: mediawiki:$MEDIAWIKI_VERSION
    # use the Dockerfile in this directory
    build: .
    restart: always
    ports:
      - 8080:80
    links:
      - db
    volumes:
      - wikiimages:/var/www/html/images
    # After initial setup, download LocalSettings.php to the same directory as
    # this yaml and uncomment the following line and use compose to restart
    # the mediawiki service
    # - ./LocalSettings.php:/var/www/html/LocalSettings.php
volumes:
  mysqldata:
    driver: local
  wikiimages:
    driver: local
EOF
}

#
# get the docker file 
#
get_dockerfile() {
  timestamp=$(date -u +"%Y-%m-%d %H:%M:%S")
cat << EOF
#
# This dockerfile was generated by the profiwiki-install script
# at $timestamp by $USER on $(hostname)
#
FROM mediawiki:$MEDIAWIKI_VERSION
# responsible for this image setup
# see also http://www.bitplan.com/index.php/ProfiWiki 
MAINTAINER Wolfgang Fahl <wf@bitplan.com>
# install some more utilities
RUN apt-get update && apt-get install -y vim unzip zip 
EOF
}

target="$1"
mkdir -p $target
get_docker_compose > $target/docker-compose.yml
get_dockerfile > $target/Dockerfile
